// this test is generated by Go backend, Test_generateDecoderTests
// DO NOT EDIT!

use alphabill::decoder::{Decoder, TagValueIter, Value};

#[test]
fn decode_value() {
    // Go value uint16 = 0x201
    let data: &mut [u8] = &mut [0x3, 0x1, 0x2, 0x0, 0x0];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::U32(0x201));

    // Go value uint32 = 0x4030201
    let data: &mut [u8] = &mut [0x3, 0x1, 0x2, 0x3, 0x4];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::U32(0x4030201));

    // Go value uint64 = 0x807060504030201
    let data: &mut [u8] = &mut [0x2, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::U64(0x807060504030201));

    // Go value []uint8 = []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa}
    let data: &mut [u8] = &mut [
        0x1, 0xb, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa,
    ];
    let mut dec = Decoder::new(data);
    assert_eq!(
        dec.value(),
        Value::Bytes(vec![0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa])
    );

    // Go value string = "this is string"
    let data: &mut [u8] = &mut [
        0x4, 0xe, 0x0, 0x0, 0x0, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x72,
        0x69, 0x6e, 0x67,
    ];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::String("this is string".to_string()));

    // Go value []interface {} = []interface {}{0x20, 0x40, "AB"}
    let data: &mut [u8] = &mut [
        0x5, 0x3, 0x0, 0x0, 0x0, 0x3, 0x20, 0x0, 0x0, 0x0, 0x2, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x4, 0x2, 0x0, 0x0, 0x0, 0x41, 0x42,
    ];
    let mut dec = Decoder::new(data);
    assert_eq!(
        dec.value(),
        Value::Array(vec![
            Value::U32(0x20),
            Value::U64(0x40),
            Value::String("AB".to_string())
        ])
    );

    // Go value string = ""
    let data: &mut [u8] = &mut [0x4, 0x0, 0x0, 0x0, 0x0];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::String("".to_string()));

    // Go value []uint8 = []byte(nil)
    let data: &mut [u8] = &mut [0x1, 0x0, 0x0, 0x0, 0x0];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::Bytes(vec![]));

    // Go value []interface {} = []interface {}{}
    let data: &mut [u8] = &mut [0x5, 0x0, 0x0, 0x0, 0x0];
    let mut dec = Decoder::new(data);
    assert_eq!(dec.value(), Value::Array(vec![]));
}

#[test]
fn iterator() {
    let data: &mut [u8] = &mut [
        0x3, 0x3, 0xf0, 0xf0, 0x0, 0x0, 0x1, 0x3, 0x0, 0xff, 0x0, 0xff, 0x4, 0x2, 0x0, 0xff, 0x0,
        0xff, 0x0, 0xff, 0x0, 0xff, 0x2, 0x4, 0x5, 0x0, 0x0, 0x0, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
        0x8, 0x5, 0x2, 0x0, 0x0, 0x0, 0x3, 0x21, 0x43, 0x65, 0x87, 0x4, 0x3, 0x0, 0x0, 0x0, 0x73,
        0x74, 0x72,
    ];
    let dec = TagValueIter::new(&data);
    let items: Vec<(u8, Value)> = dec.collect();
    assert_eq!(
        items,
        vec![
            (3, Value::U32(0xf0f0)),
            (1, Value::U32(0xff00ff00)),
            (4, Value::U64(0xff00ff00ff00ff00)),
            (2, Value::String("token".to_string())),
            (
                8,
                Value::Array(vec![
                    Value::U32(0x87654321),
                    Value::String("str".to_string())
                ])
            )
        ]
    );
}
